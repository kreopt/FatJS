{"version":3,"sources":["core.js","index.js","http.js","httpjson.js","websocket.js","template.js","urls.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnfile":"fat.js","sourcesContent":["const Fat = {\n    plugins:   {},\n    config:    {},\n    signals:   new Map(),\n    configure: function (options) {\n        Object.assign(this.config, options);\n\n        if (jinja && this.config.template_url) {\n            jinja.template_url = this.config.template_url;\n        }\n    }\n};\nFat.fetch = function (name) {\n    return new Promise(function (resolve, reject) {\n        var url = Fat.config.static_url;\n        if (!url.endsWith('/')) {\n            url += '/';\n        }\n        url += 'data/' + name + '.json';\n        $.ajax({\n            type:     \"GET\",\n            url:      url,\n            dataType: 'json',\n            success:  function (r) {\n                resolve(r);\n            },\n            error:    function (jqXHR, textStatus, errorThrown) {\n                reject(\"API: \" + textStatus + \" \" + errorThrown);\n            }\n        });\n    });\n};\nwindow.Fat = Fat;\n\nFat.add_listener = function (signal, handler, scope) {\n    if (!Fat.signals.has(signal)) {\n        Fat.signals.set(signal, new Map());\n    }\n    Fat.signals.get(signal).set(handler, scope);\n};\n\nFat.remove_listener = function (signal, handler) {\n    if (!Fat.signals.has(signal)) {\n        return;\n    }\n    Fat.signals.get(signal).delete(handler);\n    if (!Fat.signals.get(signal).size) {\n        Fat.signals.delete(signal);\n    }\n};\n\nFat.emit = function (signal, data) {\n    if (Fat.signals.has(signal)) {\n        var handler_map = Fat.signals.get(signal);\n        for (var entry of handler_map) {\n            entry[0].call(entry[1], data);\n        }\n    }\n};\n","function API(options) {\n    this.options = options || {};\n    this.defaults = {\n        url:     window.location.pathname,\n        backend: 'httpjson'\n    };\n    this.options = $.extend(this.defaults, this.options);\n}\nAPI.prototype.backends = {};\nAPI.prototype.add_backend = function (name, backend) {\n    API.prototype.backends[name] = backend;\n};\nAPI.prototype.call = function (signature, args) {\n    return API.prototype.backends[this.options.backend].call(this.options.url, signature, args);\n};\n\nAPI.prototype.call_many = function (requests) {\n    return API.prototype.backends[this.options.backend].call_many(this.options.url, requests);\n};\nFat.API = API;\n","Fat.API.prototype.add_backend('http', {\n    call: function (url, signature, data) {\n        return new Promise(function(resolve, reject){\n            $.ajax({\n                type: \"POST\",\n                url: url,\n                data: {signature: signature, data: data},\n                dataType: 'json',\n                success: function(r){\n                    resolve(r);\n                },\n                error: function(jqXHR, textStatus, errorThrown){\n                    reject(\"API: \"+textStatus+\" \"+errorThrown);\n                }\n            });\n        });\n\n    },\n    call_many: function (url, requests) {\n        return new Promise(function(resolve, reject) {\n            $.ajax({\n                type:    \"POST\",\n                url:     url,\n                data:    {requests: requests},\n                dataType: 'json',\n                success: function (r) {\n                    resolve(r);\n                },\n                error: function(jqXHR, textStatus, errorThrown){\n                    reject(\"API: \"+textStatus+\" \"+errorThrown);\n                }\n            });\n        });\n    }\n});\n","Fat.API.prototype.add_backend('httpjson', {\n    call: function (url, signature, data) {\n        return new Promise(function(resolve, reject){\n            $.ajax({\n                type: \"POST\",\n                url: url,\n                data: JSON.stringify({signature: signature, data: data}),\n                dataType: 'json',\n                success: function(r){\n                    resolve(r);\n                },\n                error: function(jqXHR, textStatus, errorThrown){\n                    reject(\"API: \"+textStatus+\" \"+errorThrown);\n                }\n            });\n        });\n\n    },\n    call_many: function (url, requests) {\n        return new Promise(function(resolve, reject) {\n            $.ajax({\n                type:    \"POST\",\n                url:     url,\n                data:    JSON.stringify({requests: requests}),\n                dataType: 'json',\n                success: function (r) {\n                    resolve(r);\n                },\n                error: function(jqXHR, textStatus, errorThrown){\n                    reject(\"API: \"+textStatus+\" \"+errorThrown);\n                }\n            });\n        });\n    }\n});\n","!function () {\n    var seq = 0;\n    var state = null;\n    var ws = null;\n    var promises = {};\n    var queue = [];\n    var timeout = 100;\n\n    var init = function (url) {\n        ws = new WebSocket(url);\n        ws.onopen = function () {\n            state = 1;\n            console.debug('connected');\n            timeout = 100;\n            while (queue.length) {\n                send.apply(this, queue.splice(0, 1)[0]);\n            }\n        };\n        ws.onclose = function () {\n            state = null;\n            console.log('Соединение потеряно, восстанавливаем...');\n            setTimeout(function () {\n                timeout *= 2;\n                init(url);\n            }, timeout);\n        };\n        ws.onmessage = function (evt) {\n            var msg = JSON.parse(evt.data);\n            console.debug('RECV>', msg);\n            if (promises[msg.seq]) {\n                if (!msg.status) {\n                    promises[msg.seq].resolve(msg.data);\n                } else {\n                    promises[msg.seq].reject(msg.data);\n                }\n                delete promises[msg.seq];\n            }\n        };\n    };\n    var send = function (data, ready, options) {\n        promises[seq] = ready;\n        data.seq = seq;\n        if (options.gen_head) {\n            data.head = options.gen_head();\n        }\n        console.debug('SEND>', data);\n        ws.send(JSON.stringify(data));\n        seq++;\n    };\n    Fat.API.prototype.add_backend('ws', {\n        call: function (options, signature, data) {\n            var ready = new Promise();\n            if (!state) {\n                queue.push([\n                    {signature: signature, data: data},\n                    ready,\n                    options\n                ]);\n                init(options.url);\n            } else {\n                send({signature: signature, data: data}, ready, options);\n            }\n        },\n        call_many: function (options, requests) {\n            var ready = new Promise();\n            if (!state) {\n                queue.push([\n                    {requests: requests},\n                    ready,\n                    options\n                ]);\n                init(options.url);\n            } else {\n                send({requests: requests}, ready, options);\n            }\n        }\n    });\n}();\n","Fat.render = function ($elements, template, data) {\n    return new Promise(function (resolve, reject) {\n        jinja.render('{% include \"' + template + '\" %}', data).then(function (html) {\n            // TODO: mb make sure elements are empty\n            for (var i = 0; i < $elements.length; i++) {\n                $elements[i].innerHTML = html;\n            }\n            resolve();\n        });\n    });\n}\n","!function(){\n    const reverse={};\n    const urls = {};\n\n    Fat.urls=function urls(urls){\n\n    };\n\n    function make_reverse(){}\n    make_reverse();\n\n    jinja.make_tag('url',function(stmt){\n        var tokens=stmt.split(' ');\n        var url = tokens[0].substr(1,tokens[0].length-2);\n\n        var open = url.indexOf('(');\n        var close = -1;\n        var url_part;\n        if (open) {\n            url_part = url.substr(close+1, open-close-1);\n            this.push(url_part);\n            close = url.indexOf(')');\n            for (var i = 1; i < tokens.length; i++) {\n                this.push('get(' + tokens[i] + ')');\n                open = url.indexOf('(', close+1);\n                if (open > 0) {\n                    url_part = url.substr(close+1, open-close-1);\n                    this.push(url_part);\n                    close = url.indexOf(')');\n                }\n            }\n            url_part = url.substr(close+1, url.length-close-1);\n        } else {\n            url_part = url;\n        }\n        this.push(url_part);\n    });\n\n    jinja.make_tag('static',function(stmt){\n        stmt = stmt.trim();\n        this.push(\"write(\\\"\"+Fat.config.static_url + stmt.substr(1,stmt.length-2)+\"\\\")\");\n    });\n}();\n"],"sourceRoot":"/source/"}