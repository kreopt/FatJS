// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  self.WebSocketBus = (function(_super) {
    __extends(WebSocketBus, _super);

    WebSocketBus.prototype.toString = function() {
      return 'WebSocketBus';
    };

    function WebSocketBus(sUrl, fOnOpen) {
      this.rhandlers = {};
      this.handlers = {};
      this.setupConnection(sUrl, fOnOpen);
      this.busInitialized = false;
      CONNECT('WSAPI_REQUEST', 'apiRequest', this);
    }

    WebSocketBus.prototype.setupConnection = function(sUrl, fOnOpen) {

      /*
         тело сигнала: {type:'signal',signal:'sigName',data:{},sender:senderId}
         Входящий сигнал: sig:bus.sockId.objId
       */
      this.remoteHandles = {};
      this.busy = false;
      this.queue = [];
      this.head = {};
      this.UID = inSide.__nextID();
      return this.reconnect(sUrl, fOnOpen);
    };

    WebSocketBus.prototype.reconnect = function(sUrl, fOnOpen) {
      this.ws = new WebSocket(sUrl);
      this.ws.onopen = (function(_this) {
        return function() {
          console.debug('connected');
          if (!_this.busInitialized) {
            _this.ws.send(JSON.stringify({
              type: 'businit',
              uid: _this.UID
            }));
            return _this.busInitialized = true;
          }
        };
      })(this);
      this.ws.onclose = (function(_this) {
        return function() {
          console.log('Соединение потеряно, восстанавливаем...');
          return setTimeout((function() {
            return _this.reconnect(sUrl, fOnOpen);
          }), 1000);
        };
      })(this);
      return this.ws.onmessage = (function(_this) {
        return function(evt) {
          var msg, req, _base;
          msg = JSON.parse(evt.data);
          logDebug('RECV> ', msg);
          EMIT('DEBUG', {
            body: msg
          });
          if (msg.type === 'signal') {
            return EMIT(msg.name, (msg.body ? msg.body : {}), msg.sender);
          } else if (msg.type === 'api') {
            _this.busy = false;
            _this.rhandlers[Number(msg.seq)].success({
              status: 0,
              data: msg.data
            });
            delete _this.rhandlers[Number(msg.seq)];
            if (_this.queue.length) {
              req = _this.queue.shift();
              if (req) {
                return _this.apiRequest2(req, _this.rhandlers[Number(req.seq)].success, _this.rhandlers[Number(req.seq)].error);
              }
            }
          } else if (msg.type === 'error') {
            EMIT('ERROR', {
              body: msg.data
            });
            if (msg.errtype === 'api') {
              _this.busy = false;
              if (typeof (_base = _this.rhandlers[Number(msg.seq)]).error === "function") {
                _base.error({
                  status: 1,
                  data: msg.data
                });
              }
              delete _this.rhandlers[Number(msg.seq)];
              if (_this.queue.length) {
                req = _this.queue.shift();
                if (req) {
                  return _this.apiRequest2(req, _this.rhandlers[Number(req.seq)].success, _this.rhandlers[Number(req.seq)].error);
                }
              }
            }
          } else if (msg.type === 'businit') {
            _this.remoteHandles = msg.handles;
            return fOnOpen();
          } else if (msg.type in _this.handlers) {
            return _this.handlers[msg.type](msg);
          }
        };
      })(this);
    };

    WebSocketBus.prototype.addHandler = function(type, handler) {
      return this.handlers[type] = handler;
    };

    WebSocketBus.prototype.sighandler = function(signal) {
      var _ref;
      if ('signal' in signal) {
        if ((_ref = signal.signal, __indexOf.call(this.remoteHandles, _ref) >= 0)) {
          logDebug('SEND> ', signal);
          return this.ws.send(JSON.stringify(signal));
        }
      } else {
        console.error(signal);
        throw 'Bad signal';
      }
    };

    WebSocketBus.prototype.apiRequest = function(oRequest) {
      oRequest.type = 'signal';
      oRequest.head = this.head;
      logDebug('SEND> ', oRequest);
      this.ws.send(JSON.stringify(oRequest));
      return null;
    };

    WebSocketBus.prototype.apiRequest2 = function(oRequest, success, error) {
      this.rhandlers[Number(oRequest.seq)] = {
        success: success,
        error: error
      };
      if (!this.busy) {
        oRequest.head = this.head;
        this.busy = true;
        logDebug('SEND> ', oRequest);
        return this.ws.send(JSON.stringify(oRequest));
      } else {
        return this.queue.push(oRequest);
      }
    };

    return WebSocketBus;

  })(IBus);

}).call(this);
