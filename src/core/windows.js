// Generated by CoffeeScript 1.7.1
(function() {
  var LoadIndicator, Notifier, Window;

  Notifier = (function() {
    function Notifier() {}

    Notifier.prototype.success = function(_arg) {
      var body, head;
      head = _arg.head, body = _arg.body;
      return inSide.Notifier.show(head, body, 'success');
    };

    Notifier.prototype.error = function(_arg) {
      var body;
      body = _arg.body;
      return inSide.Notifier.show('Ошибка', body, 'danger');
    };

    Notifier.prototype.notify = function(_arg) {
      var body, head;
      head = _arg.head, body = _arg.body;
      return inSide.Notifier.show(head, body, 'info');
    };

    Notifier.prototype.show = function(sHead, sBody, sType, iTimeout) {
      var height, notification, notifications, notify, _i, _len;
      if (sType == null) {
        sType = 'info';
      }
      if (iTimeout == null) {
        iTimeout = 5000;
      }
      if (!sHead) {
        sHead = '';
      }
      notify = $c('div');
      notify.className = "Notify alert alert-" + sType;
      notify.innerHTML = "<strong>" + sHead + "</strong> " + sBody;
      notifications = $a('.Notify');
      height = 0;
      for (_i = 0, _len = notifications.length; _i < _len; _i++) {
        notification = notifications[_i];
        height += notification.clientHeight + 12 + 3;
      }
      notify.style.top = height + 'px';
      $s('body').appendChild(notify);
      if (iTimeout) {
        return notify.timeout = setTimeout(((function(_this) {
          return function() {
            return _this.hide(notify, sType);
          };
        })(this)), iTimeout);
      } else {
        return notify.onclick = (function(_this) {
          return function() {
            return _this.hide(notify, sType);
          };
        })(this);
      }
    };

    Notifier.prototype.hide = function(DOMNotify, sType) {
      var oldHeight;
      oldHeight = DOMNotify.clientHeight + 12 + 3;
      $(DOMNotify).fadeOut(500);
      return setTimeout((function(DOMNotify) {
        return function() {
          var notifications, ntf, _i, _len, _results;
          $(DOMNotify).remove();
          notifications = $a('.Notify');
          if (notifications.length > 0) {
            _results = [];
            for (_i = 0, _len = notifications.length; _i < _len; _i++) {
              ntf = notifications[_i];
              _results.push(ntf.style.top = ntf.offsetTop - oldHeight + 'px');
            }
            return _results;
          }
        };
      })(DOMNotify), 500);
    };

    return Notifier;

  })();

  inSide.__Register('Notifier', Notifier);

  LoadIndicator = (function() {
    function LoadIndicator() {}

    LoadIndicator.prototype.loadMessage = '<!--<progress>Загрузка...</progress>--><img src="static/loader.gif" height="32" width="32">';

    LoadIndicator.prototype.show = function() {
      var indicator, overlay;
      if (LoadIndicator.prototype.indicator == null) {
        overlay = $c('div');
        overlay.style.height = window.innerHeight + 'px';
        overlay.style.width = window.innerWidth + 'px';
        overlay.style.position = 'fixed';
        overlay.style.top = '0px';
        overlay.style.left = '0px';
        overlay.style.background = 'rgba(0,0,0,0.5)';
        overlay.style.zIndex = '9999';
        overlay.id = 'Overlay';
        indicator = document.createElement('div');
        indicator.id = 'LoadIndicator';
        indicator.innerHTML = this.loadMessage;
        overlay.appendChild(indicator);
        LoadIndicator.prototype.indicator = overlay;
      }
      return document.body.appendChild(LoadIndicator.prototype.indicator);
    };

    LoadIndicator.prototype.hide = function() {
      var el;
      if (el = document.getElementById('Overlay')) {
        return document.body.removeChild(el);
      }
    };

    return LoadIndicator;

  })();

  inSide.LoadIndicator = new LoadIndicator();

  Window = (function() {
    Window.prototype.windows = {};

    function Window() {
      CONNECT('inSide.WinMan.show', 'show', this);
      CONNECT('inSide.WinMan.close', '_close', this);
    }

    Window.prototype.show = function(_arg) {
      var a, app, args, cls, dialog, id, options, overlay, title;
      cls = _arg.cls, title = _arg.title, app = _arg.app, args = _arg.args, options = _arg.options;
      if (!options) {
        options = {};
      }
      id = inSide.__nextID();
      overlay = $c('div');
      overlay.className = "modal fade " + cls + " WMOverlay";
      overlay.id = 'WMModal';
      $attr(overlay, 'role', 'dialog');
      $attr(overlay, 'aria-hidden', 'true');
      $d(overlay, 'id', id);
      dialog = "<div class=\"modal-dialog\">\n  <div class=\"modal-content\">\n    <div class=\"modal-header\">" + (options.noclose ? "" : "<button type=\"button\" class=\"close\" data-dismiss=\"modal\" data-id=\"" + id + "\" aria-hidden=\"true\">&times;</button>") + ("      <h4 class=\"modal-title\">" + title + "</h4>\n    </div>\n    <div class=\"modal-body WMContent\">\n    </div>\n  </div><!-- /.modal-content -->\n</div><!-- /.modal-dialog -->");
      overlay.innerHTML = dialog;
      a = this;
      $s('.CloseWindow', overlay).onclick = function() {
        return a.close($d(this, 'id'));
      };
      args.__winId__ = id;
      inSide.run(app, $s('.WMContent', overlay), args, (function(h) {
        h.__winId__ = id;
        Window.prototype.windows[id] = h;
        $s('body').appendChild(overlay);
        $(overlay).modal('show');
        return $(overlay).on('hidden.bs.modal', function() {
          return $(this).remove();
        });
      }));
      return id;
    };

    Window.prototype._close = function(_arg) {
      var id;
      id = _arg.id;
      return this.close(id);
    };

    Window.prototype.close = function(sWindowId) {
      Window.prototype.windows[Number(sWindowId)].__destroy__();
      delete Window.prototype.windows[Number(sWindowId)];
      removeClass($s('body'), 'modal-open');
      return $('#WMModal').modal('hide');
    };

    return Window;

  })();

  inSide.__Register('WinMan', Window);

}).call(this);
