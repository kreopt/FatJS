// Generated by CoffeeScript 1.7.1
(function () {
    'use strict';
    var __indexOf = [].indexOf || function (item) {
        for (var i = 0, l = this.length; i < l; i++) {
            if (i in this && this[i] === item) return i;
        }
        return -1;
    };

    self.installDOMWrappers = function (oHolder, DOMToplevelScope) {
        var displayCache, getRealDisplay, isHidden;
        oHolder.$scope = (function (DOMToplevelScope) {
            return function (DOMScope) {
                if (DOMScope != null) {
                    return DOMScope;
                } else {
                    return DOMToplevelScope;
                }
            };
        })(DOMToplevelScope);
        oHolder.$S = function (sCPath, DOMScope) {
            var classes, el;
            classes = sCPath.split('.');
            if (!DOMScope) {
                DOMScope = DOMToplevelScope;
            }
            el = DOMScope;
            classes.forEach((function (_this) {
                return function (e) {
                    return el = $s('.' + e, el);
                };
            })(this));
            return el;
        };
        oHolder.$A = function (sCPath, DOMScope) {
            var classes, el;
            classes = sCPath.split('.');
            if (!DOMScope) {
                DOMScope = DOMToplevelScope;
            }
            el = DOMScope;
            classes.forEach((function (_this) {
                return function (e, i) {
                    return el = i < classes.length - 1 ? $s('.' + e, el) : $a('.' + e, el);
                };
            })(this));
            return el;
        };
        oHolder.$p = function (sSelector, DOMScope) {
            var match, matches, parent, _i, _len, _ref;
            if (!DOMScope) {
                throw 'Child node must be specified!';
            }
            parent = DOMScope;
            while (parent.parentNode) {
                parent = parent.parentNode;
                matches = (_ref = parent.parentNode) != null ? _ref.querySelectorAll(sSelector) : void 0;
                for (_i = 0, _len = matches.length; _i < _len; _i++) {
                    match = matches[_i];
                    if (match === parent) {
                        return parent;
                    }
                }
            }
            return null;
        };
        oHolder.$s = function (sSelector, DOMScope) {
            var el;
            el = oHolder.$scope(DOMScope).querySelector(sSelector);
            if (!el) {
                el = document.createElement('empty');
                el.isEmpty = true;
            }
            return el;
        };
        oHolder.$a = function (sSelector, DOMScope) {
            var item, r;
            r = oHolder.$scope(DOMScope).querySelectorAll(sSelector);
            return (function () {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = r.length; _i < _len; _i++) {
                    item = r[_i];
                    _results.push(item);
                }
                return _results;
            })();
        };
        oHolder.$c = function (sElemName) {
            return document.createElement(sElemName);
        };
        oHolder.$e = function (sSelector, sEventType, sEventName, aEventArgs) {
            var evObj, fireOnThis;
            fireOnThis = $s(sSelector);
            evObj = document.createEvent(sEventType);
            evObj.initEvent.apply(this, aEventArgs);
            return fireOnThis.dispatchEvent(evObj);
        };
        oHolder.$next = function (DOMNode) {
            var sibling;
            sibling = DOMNode.nextSibling;
            while (sibling && sibling.nodeType !== 1) {
                sibling = sibling.nextSibling;
            }
            return sibling;
        };
        oHolder.$prev = function (DOMNode) {
            var sibling;
            sibling = DOMNode.previousSibling;
            while (sibling && sibling.nodeType !== 1) {
                sibling = sibling.previousSibling;
            }
            return sibling;
        };
        oHolder.$attr = function (DOMNode, sAttr, vValue) {
            if (vValue == null) {
                return DOMNode.getAttribute(sAttr);
            }
            DOMNode.setAttribute(sAttr, vValue);
            return DOMNode[sAttr] = vValue;
        };
        oHolder.$rmattr = function (DOMNode, sAttr) {
            DOMNode[sAttr] = null;
            return DOMNode.removeAttribute(sAttr);
        };
        oHolder.$tglattr = function (DOMNode, sAttr, vValue) {
            if (oHolder.$attr(DOMNode, sAttr)) {
                return oHolder.$rmattr(DOMNode, sAttr);
            } else {
                return oHolder.$attr(DOMNode, sAttr, vValue);
            }
        };
        oHolder.$d = function (DOMNode, sName, vValue) {
            if (vValue == null) {
                vValue = null;
            }
            if (!(__indexOf.call(DOMNode, 'dataset') >= 0)) {
                if (vValue == null) {
                    return DOMNode.getAttribute('data-' + sName);
                }
                return DOMNode.setAttribute('data-' + sName, vValue);
            } else {
                if (vValue == null) {
                    return DOMNode.dataset[sName];
                }
                return DOMNode.dataset[sName] = vValue;
            }
        };
        oHolder.toggleClass = function (DOMNode, className) {
            return DOMNode.classList.toggle(className);
        };
        oHolder.hasClass = function (DOMNode, className) {
            if (DOMNode.classList) {
                return DOMNode.classList.contains(className);
            } else {
                return false;
            }
        };
        oHolder.addClass = function (DOMNode, className) {
            return DOMNode.classList.add(className);
        };
        oHolder.addUniqueClass = function (DOMNode, sClassName, DOMScope) {
            var node, oldNodes, _i, _len;
            DOMScope = oHolder.$scope(DOMScope);
            oldNodes = DOMScope.querySelectorAll('.' + sClassName);
            for (_i = 0, _len = oldNodes.length; _i < _len; _i++) {
                node = oldNodes[_i];
                removeClass(node, sClassName);
            }
            return addClass(DOMNode, sClassName);
        };
        oHolder.removeClass = function (DOMNode, className) {
            return DOMNode.classList.remove(className);
        };
        oHolder.removeNode = function (DOMNode) {
            if (DOMNode.parentNode) {
                return DOMNode.parentNode.removeChild(DOMNode);
            }
        };
        oHolder.insertAfter = function (DOMNode, sHtml) {
            return DOMNode.insertAdjacentHTML('afterend', sHtml);
        };
        oHolder.insertBefore = function (DOMNode, sHtml) {
            return DOMNode.insertAdjacentHTML('beforebegin', sHtml);
        };
        getRealDisplay = function (elem) {
            var computedStyle;
            if (elem.currentStyle) {
                return elem.currentStyle.display;
            } else {
                if (window.getComputedStyle) {
                    computedStyle = window.getComputedStyle(elem, null);
                    return computedStyle.getPropertyValue('display');
                }
            }
        };
        displayCache = {};
        isHidden = function (el) {
            var height, tr, width;
            width = el.offsetWidth;
            height = el.offsetHeight;
            tr = el.nodeName.toLowerCase() === "tr";
            if (width === 0 && height === 0 && !tr) {
                return true;
            } else {
                if (width > 0 && height > 0 && !tr) {
                    return false;
                } else {
                    return getRealDisplay(el);
                }
            }
        };
        oHolder.$toggle = function (el) {
            if (isHidden(el)) {
                return show(el);
            } else {
                return hide(el);
            }
        };
        oHolder.$hide = function (DOMNode) {
            if (!DOMNode.getAttribute('displayOld')) {
                DOMNode.setAttribute("displayOld", DOMNode.style.display);
            }
            return DOMNode.style.display = "none";
        };
        oHolder.$show = function (DOMNode) {
            var body, display, nodeName, old, testElem;
            if (getRealDisplay(DOMNode) !== 'none') {
                return;
            }
            old = DOMNode.getAttribute("displayOld");
            DOMNode.style.display = old || "";
            if (getRealDisplay(DOMNode) === "none") {
                nodeName = DOMNode.nodeName;
                body = document.body;
                if (displayCache[nodeName]) {
                    display = displayCache[nodeName];
                } else {
                    testElem = document.createElement(nodeName);
                    body.appendChild(testElem);
                    display = getRealDisplay(testElem);
                    if (display === "none") {
                        display = "block";
                    }
                    body.removeChild(testElem);
                    displayCache[nodeName] = display;
                }
                DOMNode.setAttribute('displayOld', display);
                return DOMNode.style.display = display;
            }
        };
        oHolder.dragSetup = function (event, oData, sEffect) {
            event.dataTransfer.setData('text/plain', JSON.stringify(oData));
            event.dataTransfer.effectAllowed = sEffect;
            return event.dataTransfer.dropEffect = sEffect;
        };
        oHolder.addEvents = function (DOMNodes, sEventName, fCallback) {
            var holder, node, _i, _len, _results;
            holder = this ? this : window;
            _results = [];
            for (_i = 0, _len = DOMNodes.length; _i < _len; _i++) {
                node = DOMNodes[_i];
                _results.push(node.addEventListener(sEventName, (function (e) {
                    return fCallback.call(this, e, holder);
                }), false));
            }
            return _results;
        };
        oHolder.addEventBySelector = function (sSelector, DOMScope, sEventName, fCallback) {
            var DOMNodes, holder;
            if (arguments.length < 4) {
                fCallback = sEventName;
                sEventName = DOMScope;
                DOMScope = void 0;
            }
            holder = this ? this : window;
            DOMNodes = holder.$a(sSelector, DOMScope);
            return addEvents(DOMNodes, sEventName, fCallback);
        };
        oHolder.removeNodesBySelector = function (sSelector, DOMScope) {
            var DOMNodes, node, _i, _len, _results;
            if (DOMScope == null) {
                DOMScope = document;
            }
            DOMNodes = DOMScope.querySelectorAll(sSelector);
            _results = [];
            for (_i = 0, _len = DOMNodes.length; _i < _len; _i++) {
                node = DOMNodes[_i];
                _results.push(node.parentNode.removeChild(node));
            }
            return _results;
        };
        return oHolder.setupEvents = function (oEventListeners, DOMScope) {
            var event, events, listener, listenerName, listeners, nodes, scope, selector, single, _results;
            scope = oHolder.$scope(DOMScope);
            _results = [];
            for (selector in oEventListeners) {
                events = oEventListeners[selector];
                if (selector[0] === '$') {
                    selector = selector.substr(1);
                    single = true;
                } else if (selector[0] === '#') {
                    single = true;
                } else {
                    single = false;
                }
                nodes = single ? [$s(selector, scope)] : nodes = $a(selector, scope);
                _results.push((function () {
                    var _results1;
                    _results1 = [];
                    for (event in events) {
                        listeners = events[event];
                        if (typeof listeners === typeof (function () {
                        })) {
                            _results1.push(oHolder.addEvents(nodes, event, listeners));
                        } else {
                            _results1.push((function () {
                                var _results2;
                                _results2 = [];
                                for (listenerName in listeners) {
                                    listener = listeners[listenerName];
                                    _results2.push(oHolder.addEvents(nodes, event, listener));
                                }
                                return _results2;
                            })());
                        }
                    }
                    return _results1;
                })());
            }
            return _results;
        };
    };

    installDOMWrappers(self, document);

}).call(this);
