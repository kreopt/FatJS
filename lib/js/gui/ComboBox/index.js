// Generated by CoffeeScript 1.3.1
(function() {

  CMP('jafw.gui.ComboBox', {
    __forms: ['@select'],
    __using: ['jafw.gui.ListView'],
    __css: ['lib/ComboBox'],
    _init: function(oConfig) {
      var _this = this;
      this.__requiredConfig(oConfig, ['container', 'id']);
      this.config = oConfig;
      if (!oConfig.idField) {
        this.config.idField = 'id';
      }
      if (!oConfig.dataField) {
        this.config.dataField = 'name';
      }
      this.hide = function(e) {
        if (e.target.id !== _this.id) {
          return _this.list.style.display = 'none';
        }
      };
      Object.defineProperty(this, 'value', {
        get: function() {
          return $data($s('#' + this.id + '_CB_Item'), 'value');
        },
        set: function(vVal) {
          var index;
          index = Array.prototype.indexOf.call($a('.listItem', this.list), $s('.listItem[data-id="' + vVal + '"]', this.list));
          this.listView.selectItem(index, true);
          return this.selectItem(this.listView.selected, true);
        }
      });
      this.put(oConfig.container, oConfig.id, oConfig.data ? oConfig.data : []);
      return this.onSelect = oConfig.onSelect;
    },
    reload: function(aItems) {
      this.item.innerHTML = '--';
      $data(this.item, 'value', '');
      this.listView.reload(aItems);
      if (this.listView.items.length) {
        return this.selectItem(this.listView.items[0], true);
      }
    },
    put: function(DOMContainer, sId, aItems) {
      var app,
        _this = this;
      this.container = DOMContainer;
      this.id = sId;
      app = this;
      this.RENDER('@select', this.container, {
        id: sId
      });
      this.list = $s('#' + sId + '_CB_List');
      this.item = $s('#' + sId + '_CB_Item');
      this.listView = INSTANCE('jafw.gui.ListView', {
        container: this.list,
        id: sId,
        idField: this.config.idField,
        dataField: this.config.dataField,
        data: aItems
      });
      this.listView.selectItem = function(index, noevented) {
        return app.selectItem(this.selected, noevented);
      };
      this.reload(aItems);
      if (this.config["default"]) {
        this.value = this.config["default"];
      }
      this.item.onclick = function() {
        return _this.list.style.display = _this.list.style.display === 'none' ? 'block' : 'none';
      };
      $s('body').removeEventListener('click', this.hide, true);
      return $s('body').addEventListener('click', this.hide, true);
    },
    selectItem: function(listItem, noevented) {
      this.item.innerHTML = listItem[this.config.dataField];
      $data(this.item, 'value', listItem[this.config.idField]);
      if (!noevented) {
        return typeof this.onSelect === "function" ? this.onSelect(listItem) : void 0;
      }
    }
  });

}).call(this);
