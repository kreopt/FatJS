// Generated by CoffeeScript 1.3.1
(function() {

  CMP('jafw.gui.Pager', {
    __forms: ['@pager'],
    _init: function(oConfig) {
      if (typeof oConfig.loader !== typeof (function() {})) {
        throw 'Pager loader unitialized!';
      }
      this.loader = oConfig.loader;
      this.pageItems = {};
      this.page = 1;
      this.pageCount = 1;
      this.loadCount = oConfig.loadCount ? (oConfig.loadCount - 1) / 2 : 2;
      return this.itemsCount = oConfig.itemsCount ? oConfig.itemsCount : 25;
    },
    put: function(DOMContainer, oPageContainer) {
      var _this = this;
      if (typeof oPageContainer.put !== typeof (function() {})) {
        throw 'oPageContainer must implement put(aItems) method';
      }
      this.pageContainer = oPageContainer;
      this.container = DOMContainer;
      return this.loader(0, function(oResponse) {
        _this.pageItems = [];
        _this.pageCount = Math.ceil(oResponse / _this.itemsCount);
        if (_this.page > _this.pageCount) {
          _this.page = 1;
        }
        return _this.getPage(_this.page);
      });
    },
    renewPager: function(iPageIndex) {
      var app,
        _this = this;
      if (iPageIndex) {
        this.page = iPageIndex;
      }
      this.RENDER('@pager', this.container, {
        max: this.pageCount,
        current: this.page
      });
      app = this;
      addEventBySelector('.Page', this.container, 'click', function() {
        return app.getPage(this.dataset['page']);
      });
      $s('.NextPage').onclick = function() {
        return _this.getPage(_this.page + 1);
      };
      return $s('.PrevPage').onclick = function() {
        return _this.getPage(_this.page - 1);
      };
    },
    getPage: function(iPageIndex) {
      var next, prev,
        _this = this;
      if (!(iPageIndex != null)) {
        iPageIndex = this.page;
      }
      if (iPageIndex < 1 || iPageIndex > this.pageCount) {
        iPageIndex = 1;
      }
      this.renewPager(iPageIndex);
      if (!(this.pageItems[(iPageIndex - 1) * this.itemsCount] != null)) {
        prev = iPageIndex - this.loadCount > 0 ? iPageIndex - 1 : 1;
        next = iPageIndex + this.loadCount <= this.pageCount ? iPageIndex + 1 : this.pageCount;
        return this.loader("" + ((prev - 1) * this.itemsCount) + "-" + (next * this.itemsCount - 1), function(oResponse) {
          var index;
          _this.pageItems = [];
          index = (prev - 1) * _this.itemsCount;
          oResponse.forEach(function(item) {
            return _this.pageItems[index++] = item;
          });
          return _this.pageContainer.put(_this.pageItems.slice((iPageIndex - 1) * _this.itemsCount, iPageIndex * _this.itemsCount));
        });
      } else {
        return this.pageContainer.put(this.pageItems.slice((iPageIndex - 1) * this.itemsCount, iPageIndex * this.itemsCount));
      }
    }
  });

}).call(this);
