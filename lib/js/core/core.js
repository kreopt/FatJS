// Generated by CoffeeScript 1.3.1
(function() {
  var UID, libImport, loadScripts, loadStyes, loaderCallNext, loaderRequest, needToLoad, scripts, styles, window,
    __slice = [].slice;

  if (!(typeof window !== "undefined" && window !== null)) {
    window = self;
  }

  UID = 0;

  JAFW.nextID = function() {
    return UID++;
  };

  JAFW.DEBUG = true;

  window.DEBUG = JAFW.DEBUG ? function() {
    var args, _ref;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return typeof console !== "undefined" && console !== null ? (_ref = console.log) != null ? typeof _ref.apply === "function" ? _ref.apply(console, args) : void 0 : void 0 : void 0;
  } : function() {};

  window.assert = JAFW.DEBUG ? function() {
    var args, _ref;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return typeof console !== "undefined" && console !== null ? (_ref = console.assert) != null ? typeof _ref.apply === "function" ? _ref.apply(console, args) : void 0 : void 0 : void 0;
  } : function() {};

  window.IMPORT = function(oScriptArray, sPath, fAfterLoad) {
    if (oScriptArray.length === 0) {
      return typeof fAfterLoad === "function" ? fAfterLoad() : void 0;
    } else {
      return loadScripts(oScriptArray[0], sPath, function() {
        DEBUG('Loaded from path %s: %o', sPath, oScriptArray[0]);
        oScriptArray.shift();
        return IMPORT(oScriptArray, sPath, fAfterLoad);
      });
    }
  };

  window.IMPORTCSS = function(oStyleArray, sPath, sId) {
    return loadStyes(oStyleArray, sId, sPath);
  };

  needToLoad = {};

  loaderCallNext = function() {
    var args, fCallback, iId;
    iId = arguments[0], fCallback = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    if (--needToLoad[iId] === 0) {
      delete needToLoad[iId];
      return fCallback != null ? typeof fCallback.apply === "function" ? fCallback.apply(null, args) : void 0 : void 0;
    }
  };

  loaderRequest = function(fLoadMethod, sPath, oData, fCallback) {
    var id;
    id = JAFW.nextID();
    needToLoad[id] = oData.length;
    oData.forEach(function(request) {
      return fLoadMethod("" + sPath + "/" + request, id);
    });
    if (!oData.length) {
      return typeof fCallback === "function" ? fCallback() : void 0;
    }
  };

  scripts = {};

  styles = {};

  loadScripts = function(oRequest, sPath, fCallback) {
    var loadMethod;
    loadMethod = function(sPath, iId) {
      var script;
      if (scripts[sPath] != null) {
        return loaderCallNext(iId, fCallback);
      } else {
        script = document.createElement('script');
        script.src = "" + sPath + ".js";
        script.id = 'SCR_' + sPath.replace(/\//g, '_');
        script.async = true;
        document.getElementsByTagName('head')[0].appendChild(script);
        window.ImportName = sPath;
        scripts[sPath] = script;
        return script.onload = function() {
          return loaderCallNext(iId, fCallback);
        };
      }
    };
    return loaderRequest(loadMethod, sPath, oRequest, fCallback);
  };

  loadStyes = function(oRequest, appName, sPath, fCallback, bNoAppend) {
    var loadMethod;
    loadMethod = function(sPath, iId) {
      var style;
      if (!(styles[sPath] != null)) {
        style = document.createElement('link');
        style.rel = 'stylesheet';
        style.href = "" + sPath + ".css";
        style.className = 'CSS_' + appName;
        style.id = 'CSS_' + appName + '_' + sPath.replace(/\//, '_');
        styles[sPath] = style;
        if (!bNoAppend) {
          return document.getElementsByTagName('head')[0].appendChild(style);
        }
      } else {
        if (!document.querySelector('#CSS_' + appName + '_' + sPath.replace(/\//, '_'))) {
          return document.getElementsByTagName('head')[0].appendChild(styles[sPath]);
        }
      }
    };
    return loaderRequest(loadMethod, sPath, oRequest, fCallback);
  };

  if (!(JAFW.ScriptPath != null)) {
    throw 'JAFW.ScriptPath is not defined!';
  }

  if (!JAFW.mainFunc) {
    throw 'JAWF.mainFunc is not defined!';
  }

  libImport = [];

  JAFW.IncludeLibs.forEach(function(importArray) {
    return libImport.push(importArray);
  });

  IMPORT(libImport, "" + JAFW.ScriptPath + "/lib", function() {
    var importKeys, importPaths, importScripts;
    importKeys = JAFW.JafwModules;
    importPaths = function(aPaths, oScripts, fReady) {
      var path;
      if (aPaths.length) {
        path = aPaths[0];
        aPaths.shift();
        return IMPORT([oScripts[path]], "" + JAFW.ScriptPath + "/" + path, function() {
          return importPaths(aPaths, oScripts, fReady);
        });
      } else {
        return typeof fReady === "function" ? fReady() : void 0;
      }
    };
    importScripts = function(aPaths) {
      var path;
      if (aPaths.length) {
        path = aPaths[0];
        aPaths.shift();
        return importPaths(Object.keys(path), path, function() {
          return importScripts(aPaths);
        });
      } else {
        return JAFW.mainFunc();
      }
    };
    return importScripts(importKeys);
  });

}).call(this);
