// Generated by CoffeeScript 1.3.1
(function() {
  var Ajax, URL, window,
    __slice = [].slice;

  if (!(typeof window !== "undefined" && window !== null)) {
    window = self;
  }

  URL = (function() {

    function URL() {}

    URL.prototype.encode = function(oSubObject, sPrefix) {
      var encoded, keyIndex, keyName, subObject;
      if (typeof oSubObject === typeof '') {
        return oSubObject;
      }
      encoded = [];
      for (keyIndex in oSubObject) {
        subObject = oSubObject[keyIndex];
        keyName = sPrefix ? "" + sPrefix + "[" + (encodeURIComponent(keyIndex)) + "]" : encodeURIComponent(keyIndex);
        encoded.push(typeof subObject !== typeof {} ? "" + keyName + "=" + (encodeURIComponent(subObject)) : URL.prototype.encode(subObject, keyName));
      }
      return encoded.join('&');
    };

    URL.prototype.decode = function(sUrlStr) {
      var hash, hashes, key, parseKey, val, vars, _i, _len, _ref;
      if (sUrlStr === void 0) {
        sUrlStr = window.location.href.slice(window.location.href.indexOf('?') + 1);
      }
      hashes = sUrlStr.split('&');
      vars = {};
      parseKey = function(sKey, oObject, vValue) {
        var key, unparsed;
        key = sKey.substr(0, sKey.indexOf('['));
        if (!key) {
          oObject[sKey] = vValue;
          return;
        }
        if (!(oObject[key] != null)) {
          oObject[key] = {};
        }
        unparsed = sKey.substr(sKey.indexOf('[') + 1);
        return parseKey(unparsed.substr(0, unparsed.indexOf(']')) + unparsed.substr(unparsed.indexOf(']') + 1), oObject[key], vValue);
      };
      for (_i = 0, _len = hashes.length; _i < _len; _i++) {
        hash = hashes[_i];
        _ref = decodeURIComponent(hash).split('='), key = _ref[0], val = _ref[1];
        parseKey(key, vars, val);
      }
      return vars;
    };

    return URL;

  })();

  Ajax = (function() {

    function Ajax() {}

    Ajax.prototype.get = function(sUrl, oData, fSuccess, fError) {
      return Ajax.prototype.request('GET', sUrl, oData, fSuccess, fError);
    };

    Ajax.prototype.post = function(sUrl, oData, fSuccess, fError) {
      return Ajax.prototype.request('POST', sUrl, oData, fSuccess, fError);
    };

    Ajax.prototype.request = function(sMethod, sUrl, oData, fSuccess, fError) {
      var request, requestData;
      request = new XMLHttpRequest();
      request.onreadystatechange = function() {
        var handler;
        if (request.readyState === 4) {
          handler = request.status === 200 ? fSuccess : fError;
          return typeof handler === "function" ? handler(request) : void 0;
        }
      };
      requestData = URL.prototype.encode(oData);
      if (sMethod === 'GET') {
        sUrl += "?" + requestData;
        requestData = null;
      }
      request.open(sMethod, sUrl, true);
      if (sMethod === 'POST') {
        request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
      }
      return request.send(requestData);
    };

    return Ajax;

  })();

  JAFW.API = (function() {

    function API(gatewayURL) {
      this.gatewayURL = gatewayURL;
    }

    API.prototype.stdError = function(oResponse) {
      return DEBUG(oResponse);
    };

    API.prototype._sendRequest = function(sRequestData, fSuccess, fError) {
      var errorHandler, successHandler;
      if (!(fError != null)) {
        fError = this.stdError;
      }
      successHandler = function(oRequest) {
        var handler, result;
        result = JSON.parse(oRequest.responseText);
        handler = result.status === 0 ? fSuccess : fError;
        return typeof handler === "function" ? handler(result.data) : void 0;
      };
      errorHandler = function(oRequest) {
        return typeof fError === "function" ? fError(oRequest.statusText) : void 0;
      };
      return Ajax.prototype.post(this.gatewayURL, sRequestData, successHandler, errorHandler);
    };

    API.prototype.call = function(sSignature, oArgs, fSuccess, fError) {
      var method, module, requestData, _i, _ref;
      _ref = sSignature.split(APP_DELIMITER), module = 2 <= _ref.length ? __slice.call(_ref, 0, _i = _ref.length - 1) : (_i = 0, []), method = _ref[_i++];
      requestData = URL.prototype.encode({
        mod: module.join('.'),
        method: method,
        args: oArgs
      });
      return this._sendRequest(requestData, fSuccess, fError);
    };

    API.prototype.chain = function(oRequests, fSuccess, fError) {
      var requestData, requests;
      requests = [];
      oRequests.forEach(function(request) {
        var method, module, _i, _ref;
        _ref = request[1].split(APP_DELIMITER), module = 2 <= _ref.length ? __slice.call(_ref, 0, _i = _ref.length - 1) : (_i = 0, []), method = _ref[_i++];
        return requests = requests.concat(request[2].map(function(args) {
          return {
            name: request[0],
            mod: module.join('.'),
            method: method,
            args: args
          };
        }));
      });
      requestData = URL.prototype.encode({
        chain: 1,
        requests: requests
      });
      return this._sendRequest(requestData, fSuccess, fError);
    };

    return API;

  })();

  JAFW.URL = URL;

  JAFW.Ajax = Ajax;

}).call(this);
