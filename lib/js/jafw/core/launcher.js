// Generated by CoffeeScript 1.3.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  JAFW.Launcher = (function() {

    function Launcher(sContainerId, hashChange) {
      var _this = this;
      if (hashChange == null) {
        hashChange = true;
      }
      this.onAppStart = __bind(this.onAppStart, this);

      this.container = sContainerId;
      this.containerDOM = $s('#' + sContainerId);
      this.currentApp = null;
      CONNECT('APP_READY', 'onAppStart', this);
      this.stateStack = [];
      this.evented = 1;
      Object.defineProperty(this, 'stateTop', {
        get: function() {
          return this.stateStack[this.stateStack.length - 1];
        }
      });
      this.hashChange = hashChange;
      if (hashChange) {
        window.onhashchange = function() {
          var appName, res, _ref;
          if (_this.evented) {
            if ((_ref = _this.currentApp) != null) {
              _ref.__destroy();
            }
            appName = _this.getAppName();
            res = false;
            while (_this.stateStack.length > 1 && _this.stateTop.name !== appName) {
              res = _this.pop();
            }
            if (_this.stateTop.name !== appName) {
              res = false;
            }
            if (!res) {
              _this.run(appName);
            }
          }
          return _this.evented = 1;
        };
      }
    }

    Launcher.prototype.getAppName = function() {
      var appName, hash, params;
      hash = window.location.hash.substr(1);
      if (hash.indexOf('?') !== -1) {
        appName = hash.slice(0, hash.indexOf('?'));
        params = hash.slice(hash.indexOf('?') + 1);
      } else {
        appName = hash;
        params = '';
      }
      this.params = params ? JAFW.URL.prototype.decode(params) : '';
      return appName;
    };

    Launcher.prototype.onAppStart = function(oMessage) {
      if (oMessage.container === this.container) {
        return this.currentApp = JAFW.running[oMessage.name][oMessage.uid];
      }
    };

    Launcher.prototype.run = function(sName, oParams) {
      var hash, _ref,
        _this = this;
      if ((_ref = this.currentApp) != null) {
        _ref.__destroy();
      }
      this.params = oParams ? oParams : this.params;
      if (this.hashChange) {
        hash = sName + (this.params ? '?' + JAFW.URL.prototype.encode(this.params) : '');
        if (('#' + hash) !== window.location.hash) {
          this.evented = 0;
          window.location.hash = hash;
        }
      }
      return RUN(sName, this.container, function(uid) {
        _this.currentApp = JAFW.running[sName][uid];
        return _this.stateStack = [
          {
            name: sName,
            app: _this.currentApp,
            cont: _this.containerDOM
          }
        ];
      });
    };

    Launcher.prototype.push = function(sName, oParams) {
      var hash, newCont, stateCont,
        _this = this;
      stateCont = this.containerDOM;
      newCont = this.containerDOM.cloneNode(false);
      this.containerDOM.parentNode.replaceChild(newCont, stateCont);
      this.containerDOM = newCont;
      this.params = oParams ? oParams : this.params;
      if (this.hashChange) {
        hash = sName + (this.params ? '?' + JAFW.URL.prototype.encode(this.params) : '');
        if (('#' + hash) !== window.location.hash) {
          this.evented = 0;
          window.location.hash = hash;
        }
        return (function(stateCont) {
          return RUN(sName, _this.container, function(uid) {
            _this.currentApp = JAFW.running[sName][uid];
            return _this.stateStack.push({
              name: sName,
              app: _this.currentApp,
              cont: stateCont
            });
          });
        })(stateCont);
      }
    };

    Launcher.prototype.pop = function() {
      if (this.stateStack.length < 2) {
        return false;
      }
      this.containerDOM.parentNode.replaceChild(this.stateTop.cont, this.containerDOM);
      this.containerDOM = this.stateTop.cont;
      this.stateStack.pop();
      this.evented = 0;
      if (this.hashChange) {
        window.location.hash = this.stateTop.name;
      }
      return true;
    };

    return Launcher;

  })();

}).call(this);
