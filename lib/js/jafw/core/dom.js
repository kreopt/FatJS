// Generated by CoffeeScript 1.3.1
(function() {
  'use strict';

  var DOMProxy,
    __slice = [].slice;

  DOMProxy = (function() {

    function DOMProxy() {}

    DOMProxy.prototype.scope = function(DOMScope) {
      if (DOMScope != null) {
        return DOMScope;
      } else {
        return DOCUMENT;
      }
    };

    DOMProxy.prototype._apply = function(DOMWrapped, fFunction) {
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        args.unshift(this);
        return fFunction.apply(this, args);
      };
    };

    DOMProxy.prototype._wrap = function(DOMNodes) {
      var wrapped;
      wrapped = DOMNodes ? DOMNodes : DOCUMENT.createElement('empty');
      if (wrapped.tagName === 'EMPTY') {
        wrapped.isEmpty = true;
      }
      this._apply(wrapped, hasClass);
      return wrapped;
    };

    return DOMProxy;

  })();

  window.nextSibling = function(item) {
    var sibling;
    sibling = item.nextSibling;
    while (sibling && sibling.nodeType !== 1) {
      sibling = sibling.nextSibling;
    }
    return sibling;
  };

  window.prevSibling = function(item) {
    var sibling;
    sibling = item.previousSibling;
    while (sibling && sibling.nodeType !== 1) {
      sibling = sibling.previousSibling;
    }
    return sibling;
  };

  window.$s = function(sSelector, DOMScope) {
    try {
      return DOMProxy.prototype._wrap(DOMProxy.prototype.scope(DOMScope).querySelector(sSelector));
    } catch (exception) {
      DEBUG('Invalid selector: ' + sSelector);
      return null;
    }
  };

  window.$a = function(sSelector, DOMScope) {
    var item, r, rr, _i, _len;
    r = DOMProxy.prototype.scope(DOMScope).querySelectorAll(sSelector);
    rr = [];
    for (_i = 0, _len = r.length; _i < _len; _i++) {
      item = r[_i];
      rr.push(item);
    }
    return rr;
  };

  window.$c = function(sElemName) {
    return DOCUMENT.createElement(sElemName);
  };

  window.$e = function(sSelector, sEventName) {
    var evObj, fireOnThis;
    fireOnThis = $s(sSelector);
    evObj = document.createEvent('MouseEvents');
    evObj.initEvent('click', true, true);
    return fireOnThis.dispatchEvent(evObj);
  };

  window.$attr = function(DOMNode, sAttr, vValue) {
    if (!(vValue != null)) {
      return DOMNode.getAttribute(sAttr);
    }
    DOMNode.setAttribute(sAttr, vValue);
    return DOMNode[sAttr] = vValue;
  };

  window.$rmattr = function(DOMNode, sAttr) {
    return DOMNode.removeAttribute(sAttr);
  };

  window.$data = function(DOMNode, sName, vValue) {
    if (!(vValue != null)) {
      return DOMNode.dataset[sName];
    }
    return DOMNode.dataset[sName] = vValue;
  };

  window.$d = document;

  window.$w = window;

  window.toggleClass = function(DOMNode, className) {
    return DOMNode.classList.toggle(className);
  };

  window.hasClass = function(DOMNode, className) {
    if (DOMNode.classList) {
      return DOMNode.classList.contains(className);
    } else {
      return false;
    }
  };

  window.addClass = function(DOMNode, className) {
    return DOMNode.classList.add(className);
  };

  window.addUniqueClass = function(DOMNode, sClassName, DOMScope) {
    var node, oldNodes, _i, _len;
    if (!(DOMScope != null)) {
      DOMScope = DOCUMENT;
    }
    oldNodes = DOMScope.querySelectorAll('.' + sClassName);
    for (_i = 0, _len = oldNodes.length; _i < _len; _i++) {
      node = oldNodes[_i];
      removeClass(node, sClassName);
    }
    return addClass(DOMNode, sClassName);
  };

  window.removeClass = function(DOMNode, className) {
    return DOMNode.classList.remove(className);
  };

  window.dragSetup = function(event, oData, sEffect) {
    event.dataTransfer.setData('text/plain', JSON.stringify(oData));
    event.dataTransfer.effectAllowed = sEffect;
    return event.dataTransfer.dropEffect = sEffect;
  };

  window.addEvents = function(DOMNodes, sEventName, fCallback) {
    var node, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = DOMNodes.length; _i < _len; _i++) {
      node = DOMNodes[_i];
      _results.push(node['on' + sEventName] = fCallback);
    }
    return _results;
  };

  window.addEventBySelector = function(sSelector, DOMScope, sEventName, fCallback) {
    var DOMNodes;
    if (arguments.length < 4) {
      fCallback = sEventName;
      sEventName = DOMScope;
      DOMScope = void 0;
    }
    DOMNodes = $a(sSelector, DOMScope);
    return addEvents(DOMNodes, sEventName, fCallback);
  };

  window.removeNodesBySelector = function(sSelector, DOMScope) {
    var DOMNodes, node, _i, _len, _results;
    DOMNodes = DOMProxy.prototype.scope(DOMScope).querySelectorAll(sSelector);
    _results = [];
    for (_i = 0, _len = DOMNodes.length; _i < _len; _i++) {
      node = DOMNodes[_i];
      _results.push(node.parentNode.removeChild(node));
    }
    return _results;
  };

  window.removeNode = function(DOMNode) {
    if (DOMNode.parentNode) {
      return DOMNode.parentNode.removeChild(DOMNode);
    }
  };

  window.after = function(DOMNodeSibling, sHtml) {
    return DOMNodeSibling.insertAdjacentHTML('afterend', sHtml);
  };

  window.before = function(DOMNodeSibling, sHtml) {
    return DOMNodeSibling.insertAdjacentHTML('beforebegin', sHtml);
  };

}).call(this);
