// Generated by CoffeeScript 1.3.3
(function() {
  var LoadIndicator;

  JAFW.Notifier = (function() {

    function Notifier() {}

    Notifier.prototype.show = function(sHead, sBody) {
      var height, notification, notifications, notify, _i, _len;
      notify = $c('div');
      notify.innerHTML = "<div class=\"NotifyHead\">" + sHead + "</div><div class=\"NotifyText\">" + sBody + "</div>";
      notify.className = 'Notify';
      notifications = $a('.Notify');
      height = 0;
      for (_i = 0, _len = notifications.length; _i < _len; _i++) {
        notification = notifications[_i];
        height += notification.clientHeight + 12 + 3;
      }
      notify.style.top = 60 + height + 'px';
      $s('body').appendChild(notify);
      return notify.timeout = setTimeout(function() {
        var ntf, oldHeight, _j, _len1, _ref, _results;
        oldHeight = notify.clientHeight + 12 + 3;
        if ((_ref = notify.parentNode) != null) {
          _ref.removeChild(notify);
        }
        notifications = $a('.Notify');
        if (notifications.length > 0) {
          _results = [];
          for (_j = 0, _len1 = notifications.length; _j < _len1; _j++) {
            ntf = notifications[_j];
            _results.push(ntf.style.top = ntf.offsetTop - oldHeight + 'px');
          }
          return _results;
        }
      }, 5000);
    };

    Notifier.prototype.toString = function() {
      return 'Notifier';
    };

    return Notifier;

  })();

  LoadIndicator = (function() {

    function LoadIndicator() {}

    LoadIndicator.prototype.loadMessage = '<!--<progress>Загрузка...</progress>--><img src="static/loader.gif" height="32" width="32">';

    LoadIndicator.prototype.show = function() {
      var indicator, overlay;
      if (!(LoadIndicator.prototype.indicator != null)) {
        overlay = $c('div');
        overlay.style.height = window.innerHeight + 'px';
        overlay.style.width = window.innerWidth + 'px';
        overlay.style.position = 'fixed';
        overlay.style.top = '0px';
        overlay.style.left = '0px';
        overlay.style.background = 'rgba(0,0,0,0.5)';
        overlay.id = 'Overlay';
        indicator = document.createElement('div');
        indicator.id = 'LoadIndicator';
        indicator.innerHTML = LoadIndicator.prototype.loadMessage;
        overlay.appendChild(indicator);
        LoadIndicator.prototype.indicator = overlay;
      }
      return document.body.appendChild(LoadIndicator.prototype.indicator);
    };

    LoadIndicator.prototype.hide = function() {
      var el;
      if (el = document.getElementById('Overlay')) {
        return document.body.removeChild(el);
      }
    };

    return LoadIndicator;

  })();

  JAFW.LoadIndicator = new LoadIndicator();

  JAFW.Window = (function() {

    function Window() {}

    Window.prototype.windows = {};

    Window.prototype.buttons = {
      'OK': 'Ок',
      'CANCEL': 'Отмена',
      'CLOSE': 'Закрыть',
      'YES': 'Да',
      'NO': 'Нет',
      'ACCEPT': 'Принять',
      'DECLINE': 'Отклонить',
      'SAVE': 'Сохранить'
    };

    Window.prototype.show = function(sWindowHtml, aButtonSet) {
      var btn, buttonHtml, id, window, _fn, _i, _j, _len, _len1;
      id = JAFW.nextID();
      window = $c('div');
      window.className = 'WINDOW';
      window.id = "WIN_" + id;
      window.style.position = 'absolute';
      buttonHtml = '<div style="margin:auto"><table style="margin:auto"><tr>';
      if (!(aButtonSet != null)) {
        aButtonSet = [];
      }
      for (_i = 0, _len = aButtonSet.length; _i < _len; _i++) {
        btn = aButtonSet[_i];
        buttonHtml += '<td><button id="WIN_' + id + '_' + btn + '">' + JAFW.Window.prototype.buttons[btn] + '</button></td>';
      }
      buttonHtml += '</tr></table></div>';
      window.innerHTML = sWindowHtml + buttonHtml;
      $s('body').appendChild(window);
      JAFW.Window.prototype.windows[id] = {
        handlers: {}
      };
      _fn = function(btn) {
        return $s('#WIN_' + id + '_' + btn).onclick = function() {
          if (JAFW.Window.prototype.windows[id].handlers[btn]) {
            return JAFW.Window.prototype.windows[id].handlers[btn]();
          } else {
            return JAFW.Window.prototype.close(id);
          }
        };
      };
      for (_j = 0, _len1 = aButtonSet.length; _j < _len1; _j++) {
        btn = aButtonSet[_j];
        _fn(btn);
      }
      return id;
    };

    Window.prototype.showModal = function(sWindowHtml, aButtonSet, oParams) {
      var btn, buttonHtml, id, overlay, _fn, _i, _j, _len, _len1;
      id = JAFW.nextID();
      overlay = $c('div');
      overlay.id = 'Overlay_' + id;
      overlay.className = 'Overlay';
      overlay.style.height = window.innerHeight + 'px';
      overlay.style.width = window.innerWidth + 'px';
      overlay.style.position = 'fixed';
      overlay.style.top = '0px';
      overlay.style.left = '0px';
      overlay.style.background = 'rgba(0,0,0,0.5)';
      overlay.style.overflow = 'auto';
      window.addEventListener('resize', function() {
        overlay.style.height = window.innerHeight + 'px';
        return overlay.style.width = window.innerWidth + 'px';
      }, false);
      buttonHtml = '<div style="margin:auto"><table style="margin:auto"><tr>';
      if (!(aButtonSet != null)) {
        aButtonSet = [];
      }
      for (_i = 0, _len = aButtonSet.length; _i < _len; _i++) {
        btn = aButtonSet[_i];
        buttonHtml += '<td><button id="WIN_' + id + '_' + btn + '">' + JAFW.Window.prototype.buttons[btn] + '</button></td>';
      }
      buttonHtml += '</tr></table></div>';
      overlay.innerHTML = "<div class=\"WINDOW\" id=\"WIN_" + id + "\">" + (sWindowHtml + buttonHtml) + "</div>";
      $s('body').appendChild(overlay);
      if (!(oParams != null)) {
        oParams = {};
      }
      if (oParams.w) {
        $s('.WINDOW', overlay).style.width = oParams.w + 'px';
      }
      if (oParams.h) {
        $s('.WINDOW', overlay).style.height = oParams.h + 'px';
      }
      $s('.WINDOW', overlay).style.margin = 'auto auto';
      JAFW.Window.prototype.windows[id] = {
        handlers: {}
      };
      _fn = function(btn) {
        return $s('#WIN_' + id + '_' + btn).onclick = function() {
          if (JAFW.Window.prototype.windows[id].handlers[btn]) {
            if (JAFW.Window.prototype.windows[id].handlers[btn]()) {
              return JAFW.Window.prototype.close(id);
            }
          } else {
            return JAFW.Window.prototype.close(id);
          }
        };
      };
      for (_j = 0, _len1 = aButtonSet.length; _j < _len1; _j++) {
        btn = aButtonSet[_j];
        _fn(btn);
      }
      return id;
    };

    Window.prototype.close = function(sWindowId) {
      removeNodesBySelector("#Overlay_" + sWindowId);
      removeNodesBySelector("#WIN_" + sWindowId);
      return delete JAFW.Window.prototype.windows[sWindowId];
    };

    Window.prototype.setBtnHandler = function(sWindowId, sBtnType, sHandler) {
      return JAFW.Window.prototype.windows[sWindowId].handlers[sBtnType] = sHandler;
    };

    return Window;

  })();

}).call(this);
