// Generated by CoffeeScript 1.3.3
(function() {

  CMP('jafw.gui.ListView', {
    __forms: ['@listView', '@listItem'],
    _init: function(oConfig) {
      this.__requiredConfig(oConfig, ['container', 'id']);
      this.__selected = null;
      if (!this.config) {
        this.config = {};
      }
      if (oConfig.idField) {
        this.config.idField = oConfig.idField;
      }
      if (oConfig.dataField) {
        this.config.dataField = oConfig.dataField;
      }
      this.put(oConfig.container, oConfig.id, oConfig.data ? oConfig.data : []);
      this._addItem = function(vItem) {};
      this._removeItem = function(iItemIndex) {};
      this._selectItem = function(iItemIndex, noevented) {};
      return Object.defineProperties(this, {
        addItem: {
          get: function() {
            return this.__addItem;
          },
          set: function(vVal) {
            return this._addItem = vVal;
          }
        },
        removeItem: {
          get: function() {
            return this.__removeItem;
          },
          set: function(vVal) {
            return this._removeItem = vVal;
          }
        },
        selectItem: {
          get: function() {
            return this.__selectItem;
          },
          set: function(vVal) {
            return this._selectItem = vVal;
          }
        },
        selected: {
          get: function() {
            return this.__selected;
          }
        },
        itemIndex: {
          get: function() {
            return function(vItem) {
              var item, itemIndex, items, _i, _len;
              items = $a('tr.listItem', this.view);
              for (itemIndex = _i = 0, _len = items.length; _i < _len; itemIndex = ++_i) {
                item = items[itemIndex];
                if (item === vItem) {
                  break;
                }
              }
              if (itemIndex === items.length) {
                itemIndex = -1;
              }
              return itemIndex;
            };
          }
        },
        items: {
          get: function() {
            return this.__items;
          }
        },
        moveUp: {
          get: function() {
            return this.__moveUp;
          }
        },
        moveDown: {
          get: function() {
            return this.__moveDown;
          }
        }
      });
    },
    reload: function(aItems) {
      var index, item, itemsHTML, _i, _len, _ref;
      if (!typeof aItems === typeof []) {
        throw 'Items must be an array';
      }
      this.__items = aItems;
      itemsHTML = '';
      index = 0;
      _ref = this.__items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        itemsHTML += this.RENDER('@listItem', null, {
          item: item,
          idField: this.idField,
          dataField: this.dataField,
          index: index++
        });
      }
      this.view.innerHTML = itemsHTML;
      return this.__setupEvents();
    },
    put: function(DOMContainer, sId, aItems) {
      if (!typeof aItems === typeof []) {
        return false;
      }
      this.id = sId;
      this.container = DOMContainer;
      this.RENDER('@listView', this.container, {
        id: this.id
      });
      this.idField = this.config.idField ? this.config.idField : 'id';
      this.dataField = this.config.dataField ? this.config.dataField : 'name';
      this.view = $s('#' + this.id);
      return this.reload(aItems);
    },
    __setupEvents: function() {
      var app;
      app = this;
      return addEventBySelector('tr.listItem', this.view, 'click', function() {
        return app.__selectItem.call(app, app.itemIndex(this));
      });
    },
    __items: [],
    __moveUp: function(iItemIndex) {
      var item, item1, _ref;
      if (iItemIndex < 1) {
        return;
      }
      item = $s('.listItem[data-id="' + this.__items[iItemIndex][this.idField] + '"]');
      item1 = $s('.listItem[data-id="' + this.__items[iItemIndex - 1][this.idField] + '"]');
      item.parentNode.replaceChild(item, item1);
      item.parentNode.replaceChild(item1, item);
      return _ref = [this.__items[iItemIndex - 1], this.__items[iItemIndex]], this.__items[iItemIndex] = _ref[0], this.__items[iItemIndex - 1] = _ref[1], _ref;
    },
    __moveDown: function(iItemIndex) {
      var item, item1, _ref;
      if (iItemIndex >= this.__items.length) {
        return;
      }
      item = $s('.listItem[data-id="' + this.__items[iItemIndex][this.idField] + '"]');
      item1 = $s('.listItem[data-id="' + this.__items[iItemIndex + 1][this.idField] + '"]');
      item.parentNode.replaceChild(item, item1);
      item.parentNode.replaceChild(item1, item);
      return _ref = [this.__items[iItemIndex + 1], this.__items[iItemIndex]], this.__items[iItemIndex] = _ref[0], this.__items[iItemIndex + 1] = _ref[1], _ref;
    },
    __addItem: function(vItem) {
      var last;
      this.__items.push(vItem);
      this._addItem(vItem);
      last = $a('tr.listItem', this.view);
      last = last[last.length - 1];
      if (last) {
        after(last, this.RENDER('@listItem', null, vItem));
      } else {
        this.RENDER('@listItem', this.view, vItem);
      }
      return this.__setupEvents();
    },
    __removeItem: function(iItemIndex) {
      var items;
      if (this.__items.length <= iItemIndex || !(iItemIndex != null)) {
        return;
      }
      this.__items.splice(iItemIndex, 1);
      this._removeItem.call(this, iItemIndex);
      items = $a('.listItem', this.view);
      return items[iItemIndex].parentNode.removeChild(items[iItemIndex]);
    },
    __selectItem: function(iItemIndex, noevented) {
      this.__selected = this.__items[iItemIndex];
      addUniqueClass($a('tr.listItem', this.view)[iItemIndex], 'listItemSelected', this.view);
      return this._selectItem.call(this, iItemIndex, noevented);
    }
  });

}).call(this);
