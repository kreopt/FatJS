// Generated by CoffeeScript 1.3.3
(function() {
  var _currentTab;

  _currentTab = 0;

  CMP('jafw.gui.TabControl', {
    __forms: ['@tab', '@panel'],
    __css: ['lib/TabControl'],
    _init: function() {
      return this._tabs = {};
    },
    put: function(DOMPanelContainer, DOMContentContainer, sId) {
      var cmp, index, tab, _ref, _ref1;
      this.panelContainer = DOMPanelContainer;
      this.contentContainer = DOMContentContainer;
      this.id = sId;
      if (DOMPanelContainer != null) {
        DOMPanelContainer.innerHTML = this.RENDER('@panel', null, {
          id: sId
        });
      }
      this.tabPanel = $s('#' + sId);
      _ref = this._tabs;
      for (index in _ref) {
        tab = _ref[index];
        this._putTab(tab);
      }
      cmp = this;
      _ref1 = this._tabs;
      for (index in _ref1) {
        tab = _ref1[index];
        break;
      }
      if (index) {
        return this.selectTab(index);
      }
    },
    _putTab: function(oTab) {
      return this.tabPanel.insertAdjacentHTML('beforeend', this.RENDER('@tab', null, oTab));
    },
    selectTab: function(iTabIndex) {
      var _ref, _ref1;
      _currentTab = iTabIndex;
      addUniqueClass($s('#' + this.id + ' .Tab[data-index="' + iTabIndex + '"]'), 'Selected', this.panelContainer);
      if ((_ref = this._tabs[iTabIndex].contentGenerator) != null) {
        _ref.call(this, this.contentContainer, iTabIndex);
      }
      return (_ref1 = this._tabs[iTabIndex].init) != null ? _ref1.call(this, iTabIndex) : void 0;
    },
    addTab: function(_arg) {
      var a, attr, cmp, contentGenerator, head, index, init;
      attr = _arg.attr, head = _arg.head, contentGenerator = _arg.contentGenerator, init = _arg.init;
      a = attr;
      if (!a.index) {
        index = JAFW.nextID();
        a.index = index;
      } else {
        index = a.index;
      }
      if (this.panelContainer != null) {
        if (!(this._tabs[index] != null)) {
          this._tabs[index] = {
            attr: a,
            head: head,
            contentGenerator: contentGenerator,
            init: init
          };
          this._putTab(this._tabs[index]);
          cmp = this;
          cmp.panelContainer.style.width = cmp.panelContainer.clientWidth + $s('#' + this.id + ' .Tab[data-index="' + index + '"]').clientWidth + 'px';
          return addEventBySelector('#' + this.id + ' .Tab[data-index="' + index + '"]', 'click', function() {
            return cmp.selectTab(this.dataset['index']);
          });
        } else {
          return this.selectTab(index);
        }
      }
    },
    removeTab: function(iIndex) {
      var index, tab, _ref;
      if (this._tabs[iIndex]) {
        this.panelContainer.style.width = this.panelContainer.clientWidth - $s('#' + this.id + ' .Tab[data-index="' + index + '"]').clientWidth + 'px';
        removeNodesBySelector('#' + this.id + ' .Tab[data-index="' + iIndex + '"]', this.panelContainer);
        delete this._tabs[iIndex];
        _ref = this._tabs;
        for (index in _ref) {
          tab = _ref[index];
          break;
        }
        if (index) {
          return this.selectTab(index);
        } else {
          return this.contentContainer.innerHTML = '';
        }
      }
    }
  });

  CPROPERTY('TabControl::currentTab', {
    get: function() {
      return _currentTab;
    },
    set: function() {}
  });

}).call(this);
