// Generated by CoffeeScript 1.3.1
(function() {
  var _p;

  _p = {
    items: [],
    fixed: {},
    visible: {},
    pos: {},
    w: 0,
    h: 0
  };

  CMP('jafw.gui.ScrollGrid', {
    /*
            properties:
                items:[[{...,__DOM__}]]
                fixed:{hl,hr,vt,vb}
                visible:{h,v}
                pageSize
    */

    _init: function() {
      var x, y, _i, _results;
      this.id = this.config.id;
      this.__('pageSize', {
        get: function() {
          return _p.pageSize;
        },
        set: function(oVal) {
          try {
            return _p.pageSize = parseInt(oVal);
          } catch (e) {
            return DEBUG('Bad property value');
          }
        }
      });
      this.__('fixed', {
        set: function(oVal) {
          if (typeof oVal === typeof {}) {
            _p.fixed.hl = oVal.hl;
            _p.fixed.hr = oVal.hr;
            _p.fixed.vt = oVal.vt;
            return _p.fixed.vb = oVal.vb;
          } else {
            return DEBUG('Bad property value');
          }
        }
      });
      this.__('visible', {
        set: function(oVal) {
          if (typeof oVal === typeof {}) {
            _p.visible.h = oVal.h;
            return _p.visible.v = oVal.v;
          } else {
            return DEBUG('Bad property value');
          }
        }
      });
      this.__('items', {
        get: function() {
          return _p.items;
        }
      });
      this.grid = $c('table');
      this.grid.appendChild($c('tbody'));
      y = 0;
      this.items.forEach(function(row) {
        var rowDOM, x;
        rowDOM = $c('tr');
        rowDOM.dataset['y'] = y++;
        x = 0;
        row.forEach(function(item) {
          var cellDOM, key;
          cellDOM = $c('td');
          cellDOM.dataset['x'] = x++;
          for (key in item.data) {
            cellDOM.dataset[key] = item.data[key];
          }
          return item.__DOM__ = cellDOM;
        });
        return row.__DOM__ = row;
      });
      if (!_p.h) {
        _p.h = this.items.length;
      }
      if (!_p.w) {
        _p.w = this.items[0].length;
      }
      y = Math.min(_p.w, this.items.length);
      x = Math.min(_p.h, this.items[0].length);
      (function() {
        _results = [];
        for (var _i = 0; 0 <= y ? _i <= y : _i >= y; 0 <= y ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).forEach(function(row) {
        var _i, _results;
        row = this.items[y].__DOM__;
        return (function() {
          _results = [];
          for (var _i = 0; 0 <= x ? _i <= x : _i >= x; 0 <= x ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this).forEach(function(col) {
          return row.appendChild(this.items[y][x]);
        });
      });
      return this.grid.childNodes[0].appendChild(row);
    },
    cell: function(x, y) {
      var i;
      i = this.items;
      if (i.length < y && i[y].length < x) {
        return i[y][x];
      } else {
        throw 'No such cell';
      }
    },
    addRow: function(aRow) {
      if (_p.w < aRow.length) {
        _p.w = aRow.length;
      }
      return _p.h = this.items.length;
    },
    scroll: function(iHorizontal, iVertical) {
      var insertCols, insertRows, maxx, maxy, minx, miny, newPos, rows, signx, signy, tbl, _i, _j, _results, _results1;
      newPos = {
        x: _p.pos.x + iHorizontal,
        y: _p.pos.y + iVertical
      };
      if (newPos.x >= _p.w) {
        newPos.x = _p.w - 1;
      }
      if (newPos.y >= _p.h) {
        newPos.y = _p.h - 1;
      }
      minx = Number(_p.pos.x);
      maxx = Number(newPos.x);
      miny = Number(_p.pos.y);
      maxy = Number(newPos.y);
      (function() {
        _results = [];
        for (var _i = miny; miny <= maxy ? _i <= maxy : _i >= maxy; miny <= maxy ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).forEach(function(e) {
        return removeNodesBySelector("" + this.id + " tr[data-y=\"" + e + "\"]");
      });
      (function() {
        _results1 = [];
        for (var _j = minx; minx <= maxx ? _j <= maxx : _j >= maxx; minx <= maxx ? _j++ : _j--){ _results1.push(_j); }
        return _results1;
      }).apply(this).forEach(function(e) {
        return removeNodesBySelector("" + this.id + " td[data-x=\"" + e + "\"]");
      });
      signx = iHorizontal < 0 ? -1 : 1;
      signy = iVertical < 0 ? -1 : 1;
      rows = $a("" + this.id + " tr[data-y]");
      insertCols = function(fInsertMethod) {
        return rows.forEach(function(e) {
          return this.items[$data(e, 'y')].slice(minx, maxx + 1 || 9e9).forEach(function(item) {
            return fInsertMethod(item, e);
          });
        });
      };
      if (maxx < minx) {
        insertCols(function(item, e) {
          return e.insertBefore(item.__DOM__, e.childNodes[0]);
        });
      } else {
        insertCols(function(item, e) {
          return e.appendChild(item.__DOM__);
        });
      }
      tbl = $s("" + this.id + " tbody");
      insertRows = function(fInsertMethod) {
        return this.items.slice(miny, maxy + 1 || 9e9).forEach(fInsertMethod);
      };
      if (maxy < miny) {
        return insertRows(function(e) {
          return tbl.insertBefore(e.__DOM__, tpl.childNodes[0]);
        });
      } else {
        return insertRows(function(e) {
          return tbl.appendChild(e.__DOM__);
        });
      }
    },
    sort: function(iColNum, fSortFunction) {}
  });

}).call(this);
