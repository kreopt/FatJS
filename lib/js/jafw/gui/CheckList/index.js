// Generated by CoffeeScript 1.3.3
(function() {

  CMP('jafw.gui.CheckList', {
    __forms: ['@item'],
    __using: ['jafw.gui.ListView'],
    _init: function(oConfig) {
      this.__requiredConfig(oConfig, ['container', 'id']);
      this.listView = INSTANCE('jafw.gui.ListView', {
        container: oConfig.container,
        id: oConfig.id,
        dataField: '_checkBoxData'
      });
      this.config = {};
      if (!oConfig.idField) {
        this.config.idField = 'id';
      }
      if (!oConfig.dataField) {
        this.config.dataField = 'name';
      }
      this.onChange = oConfig.onChange;
      Object.defineProperty(this, 'items', {
        get: function() {
          var checked, item, _i, _len;
          if (this.dirty) {
            this.selected = [];
            this.dirty = 0;
            checked = $a("#" + this.id + " .listItem input[type='checkbox']:checked");
            for (_i = 0, _len = checked.length; _i < _len; _i++) {
              item = checked[_i];
              this.selected.push(item.parentNode.parentNode);
            }
          }
          return this.selected;
        },
        set: function(vVal) {
          return typeof this.onSelect === "function" ? this.onSelect() : void 0;
        }
      });
      Object.defineProperty(this, 'values', {
        get: function() {
          return this.items.map(function(element) {
            return $data(element, 'id');
          });
        },
        set: function(aValues) {
          var ch, checked, item, val, _i, _j, _len, _len1;
          checked = $a("#" + this.id + " .listItem input[type='checkbox']:checked");
          for (_i = 0, _len = checked.length; _i < _len; _i++) {
            ch = checked[_i];
            $rmattr(ch, 'checked');
          }
          this.dirty = 1;
          this.selected = [];
          for (_j = 0, _len1 = aValues.length; _j < _len1; _j++) {
            val = aValues[_j];
            item = $s("#" + this.id + " .listItem[data-id='" + val + "'] input[type='checkbox']");
            $attr(item, 'checked', 'checked');
            this.selected.push(item);
          }
          return typeof onSelect === "function" ? onSelect() : void 0;
        }
      });
      return this.put(oConfig.container, oConfig.id, oConfig.data ? oConfig.data : []);
    },
    checkAll: function() {
      var item, _i, _len, _ref;
      _ref = this.listView.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        this.selectItem(item, true);
      }
      return typeof this.onSelect === "function" ? this.onSelect(item) : void 0;
    },
    reload: function(aItems) {
      var _this = this;
      this.selected = [];
      this.dirty = 0;
      if (!(aItems != null)) {
        aItems = [];
      }
      aItems.map(function(item) {
        return item._checkBoxData = _this.RENDER('@item', null, {
          item: item,
          idField: _this.config.idField,
          dataField: _this.config.dataField,
          checked: 0
        });
      });
      this.listView.reload(aItems);
      return addEventBySelector("#" + this.id + " .listItem input[type='checkbox']", 'change', function() {
        _this.dirty = 1;
        return typeof _this.onChange === "function" ? _this.onChange() : void 0;
      });
    },
    put: function(DOMContainer, sId, aItems) {
      this.container = DOMContainer;
      this.id = sId;
      return this.reload(aItems);
    }
  });

}).call(this);
